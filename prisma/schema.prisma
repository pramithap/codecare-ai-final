// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // OAuth provider info
  accounts      Account[]
  sessions      Session[]
  
  // User's repositories
  repositories  Repository[]

  @@map("users")
}

// NextAuth.js Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth.js Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// NextAuth.js VerificationToken model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Repository model
model Repository {
  id            String    @id @default(cuid())
  name          String
  provider      String    // 'github', 'gitlab', 'bitbucket', 'manual', 'zip'
  remoteUrl     String?
  defaultBranch String    @default("main")
  description   String?
  
  // Status tracking
  status        String    @default("new") // 'new', 'ready', 'drift', 'error'
  lastScanAt    DateTime?
  
  // Ownership
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Scan results and dependencies
  scanResults   ScanResult[]

  @@map("repositories")
}

// Scan results for dependency analysis
model ScanResult {
  id           String     @id @default(cuid())
  repositoryId String
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  
  // Scan metadata
  scanType     String     // 'dependencies', 'vulnerabilities', 'compatibility'
  status       String     @default("running") // 'running', 'completed', 'failed'
  
  // Results
  results      Json?      // Store scan results as JSON
  errorMessage String?
  
  // Timestamps
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("scan_results")
}
